{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\StoreTech\\\\Documents\\\\GitHub\\\\aize-tech\\\\src\\\\ui\\\\components\\\\OldFluxograma.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, ConnectionMode, useEdgesState, useNodesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { zinc } from 'tailwindcss/colors';\nimport { Square } from './FlowJam/Nodes/Square';\nimport { DefaultEdge } from './FlowJam/Edges/DefaultEdges';\nimport * as Toolbar from '@radix-ui/react-toolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NODE_TYPES = {\n  square: Square\n};\nconst EDGE_TYPES = {\n  default: DefaultEdge\n};\nconst INITIAL_NODES = [{\n  id: crypto.randomUUID(),\n  type: \"square\",\n  position: {\n    x: 200,\n    y: 400\n  },\n  data: {}\n}, {\n  id: crypto.randomUUID(),\n  type: \"square\",\n  position: {\n    x: 1000,\n    y: 400\n  },\n  data: {}\n}];\nconst OldFluxograma = () => {\n  _s();\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [nodes, setNodes, onNodesChange] = useNodesState(INITIAL_NODES);\n  const onConnect = useCallback(params => {\n    return setEdges(eds => addEdge(params, eds));\n  }, [setEdges]);\n  function addSquareNode() {\n    setNodes(nodes => [...nodes, {\n      id: crypto.randomUUID(),\n      type: \"square\",\n      position: {\n        x: 750,\n        y: 350\n      },\n      data: {}\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full p-8 rounded-lg\",\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodeTypes: NODE_TYPES,\n      edgeTypes: EDGE_TYPES,\n      nodes: nodes,\n      edges: edges,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodesChange: onNodesChange,\n      connectionMode: ConnectionMode.Loose,\n      defaultEdgeOptions: {\n        type: 'default'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        gap: 12,\n        size: 12,\n        color: zinc[100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Toolbar.Root, {\n      className: \"fixed bottom-20 left-1/2 -translate-x-1/2 bg-white rounded-2xl shadow-lg border border-zinc-300 px-8 h-20 w-96 overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar.Button, {\n        onClick: addSquareNode,\n        className: \"w-32 h-32 bg-violet-500 mt-6 rounded transition-transform hover:-translate-y-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(OldFluxograma, \"SzXfbP8YbMXdyfa/FkdJaUWG55c=\", false, function () {\n  return [useEdgesState, useNodesState];\n});\n_c = OldFluxograma;\nexport default OldFluxograma;\nvar _c;\n$RefreshReg$(_c, \"OldFluxograma\");","map":{"version":3,"names":["React","useCallback","ReactFlow","addEdge","Background","Controls","ConnectionMode","useEdgesState","useNodesState","zinc","Square","DefaultEdge","Toolbar","jsxDEV","_jsxDEV","NODE_TYPES","square","EDGE_TYPES","default","INITIAL_NODES","id","crypto","randomUUID","type","position","x","y","data","OldFluxograma","_s","edges","setEdges","onEdgesChange","nodes","setNodes","onNodesChange","onConnect","params","eds","addSquareNode","className","children","nodeTypes","edgeTypes","connectionMode","Loose","defaultEdgeOptions","gap","size","color","fileName","_jsxFileName","lineNumber","columnNumber","Root","Button","onClick","_c","$RefreshReg$"],"sources":["C:/Users/StoreTech/Documents/GitHub/aize-tech/src/ui/components/OldFluxograma.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  MiniMap,\r\n  Background,\r\n  Controls,\r\n  Connection,\r\n  Edge,\r\n  Node,\r\n  applyEdgeChanges,\r\n  applyNodeChanges,\r\n  ConnectionMode,\r\n  useEdgesState,\r\n  useNodesState,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { zinc } from 'tailwindcss/colors';\r\nimport { Square } from './FlowJam/Nodes/Square';\r\nimport { DefaultEdge } from './FlowJam/Edges/DefaultEdges';\r\nimport * as Toolbar from '@radix-ui/react-toolbar';\r\n\r\nconst NODE_TYPES = {\r\n   square: Square, \r\n}\r\n\r\nconst EDGE_TYPES = {\r\n    default: DefaultEdge,\r\n}\r\n\r\nconst INITIAL_NODES = [\r\n    {\r\n        id: crypto.randomUUID(),\r\n        type: \"square\",\r\n        position: {\r\n            x: 200,\r\n            y: 400,\r\n        },\r\n        data: {},\r\n    },\r\n    {\r\n        id: crypto.randomUUID(),\r\n        type: \"square\",\r\n        position: {\r\n            x: 1000,\r\n            y: 400,\r\n        },\r\n        data: {},\r\n    },\r\n] satisfies Node[]\r\n\r\nconst OldFluxograma: React.FC = () => {\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(INITIAL_NODES);\r\n\r\n    const onConnect = useCallback((params: Connection) => {\r\n        return setEdges((eds) => addEdge(params, eds))\r\n    }, [setEdges]);\r\n\r\n    function addSquareNode() {\r\n        setNodes(nodes => [\r\n            ...nodes,\r\n            {\r\n                id: crypto.randomUUID(),\r\n                type: \"square\",\r\n                position: {\r\n                    x: 750,\r\n                    y: 350,\r\n                },\r\n                data: {},\r\n            },\r\n        ])\r\n    }\r\n\r\n    return (\r\n        <div className='w-full h-full p-8 rounded-lg'>\r\n            <ReactFlow\r\n                nodeTypes={NODE_TYPES}\r\n                edgeTypes={EDGE_TYPES}\r\n                nodes={nodes}\r\n                edges={edges}\r\n                onEdgesChange={onEdgesChange}\r\n                onConnect={onConnect}\r\n                onNodesChange={onNodesChange}\r\n                connectionMode={ConnectionMode.Loose}\r\n                defaultEdgeOptions={{\r\n                    type: 'default',\r\n                }}\r\n            >\r\n                <Background \r\n                    gap={12}\r\n                    size={12}\r\n                    color={zinc[100]}\r\n                />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            <Toolbar.Root className='fixed bottom-20 left-1/2 -translate-x-1/2 bg-white rounded-2xl shadow-lg border border-zinc-300 px-8 h-20 w-96 overflow-hidden'>\r\n                <Toolbar.Button \r\n                    onClick={addSquareNode}\r\n                    className='w-32 h-32 bg-violet-500 mt-6 rounded transition-transform hover:-translate-y-2' \r\n                />\r\n            </Toolbar.Root>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default OldFluxograma;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}