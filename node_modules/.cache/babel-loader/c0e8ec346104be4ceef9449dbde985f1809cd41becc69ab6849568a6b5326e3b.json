{"ast":null,"code":"import $5AXX7$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport { forwardRef as $5AXX7$forwardRef, createElement as $5AXX7$createElement } from \"react\";\nimport { composeEventHandlers as $5AXX7$composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState as $5AXX7$useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Primitive as $5AXX7$Primitive } from \"@radix-ui/react-primitive\";\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\nconst $b3bbe2732c13b576$var$NAME = 'Toggle';\nconst $b3bbe2732c13b576$export$bea8ebba691c5813 = /*#__PURE__*/$5AXX7$forwardRef((props, forwardedRef) => {\n  const {\n    pressed: pressedProp,\n    defaultPressed = false,\n    onPressedChange: onPressedChange,\n    ...buttonProps\n  } = props;\n  const [pressed = false, setPressed] = $5AXX7$useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed\n  });\n  return /*#__PURE__*/$5AXX7$createElement($5AXX7$Primitive.button, $5AXX7$babelruntimehelpersesmextends({\n    type: \"button\",\n    \"aria-pressed\": pressed,\n    \"data-state\": pressed ? 'on' : 'off',\n    \"data-disabled\": props.disabled ? '' : undefined\n  }, buttonProps, {\n    ref: forwardedRef,\n    onClick: $5AXX7$composeEventHandlers(props.onClick, () => {\n      if (!props.disabled) setPressed(!pressed);\n    })\n  }));\n});\n/*#__PURE__*/\nObject.assign($b3bbe2732c13b576$export$bea8ebba691c5813, {\n  displayName: $b3bbe2732c13b576$var$NAME\n});\n/* ---------------------------------------------------------------------------------------------- */\nconst $b3bbe2732c13b576$export$be92b6f5f03c0fe9 = $b3bbe2732c13b576$export$bea8ebba691c5813;\nexport { $b3bbe2732c13b576$export$bea8ebba691c5813 as Toggle, $b3bbe2732c13b576$export$be92b6f5f03c0fe9 as Root };","map":{"version":3,"names":["$b3bbe2732c13b576$var$NAME","$b3bbe2732c13b576$export$bea8ebba691c5813","$5AXX7$forwardRef","props","forwardedRef","pressed","pressedProp","defaultPressed","onPressedChange","buttonProps","setPressed","$5AXX7$useControllableState","prop","onChange","defaultProp","$5AXX7$createElement","$5AXX7$Primitive","button","$5AXX7$babelruntimehelpersesmextends","type","disabled","undefined","ref","onClick","$5AXX7$composeEventHandlers","Object","assign","displayName","$b3bbe2732c13b576$export$be92b6f5f03c0fe9"],"sources":["C:\\Users\\StoreTech\\Documents\\GitHub\\aize-tech\\node_modules\\@radix-ui\\react-toggle\\dist\\packages\\react\\toggle\\src\\index.ts","C:\\Users\\StoreTech\\Documents\\GitHub\\aize-tech\\node_modules\\@radix-ui\\react-toggle\\dist\\packages\\react\\toggle\\src\\Toggle.tsx"],"sourcesContent":["export {\n  Toggle,\n  //\n  Root,\n} from './Toggle';\nexport type { ToggleProps } from './Toggle';\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Toggle';\n\ntype ToggleElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToggleProps extends PrimitiveButtonProps {\n  /**\n   * The controlled state of the toggle.\n   */\n  pressed?: boolean;\n  /**\n   * The state of the toggle when initially rendered. Use `defaultPressed`\n   * if you do not need to control the state of the toggle.\n   * @defaultValue false\n   */\n  defaultPressed?: boolean;\n  /**\n   * The callback that fires when the state of the toggle changes.\n   */\n  onPressedChange?(pressed: boolean): void;\n}\n\nconst Toggle = React.forwardRef<ToggleElement, ToggleProps>((props, forwardedRef) => {\n  const { pressed: pressedProp, defaultPressed = false, onPressedChange, ...buttonProps } = props;\n\n  const [pressed = false, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed,\n  });\n\n  return (\n    <Primitive.button\n      type=\"button\"\n      aria-pressed={pressed}\n      data-state={pressed ? 'on' : 'off'}\n      data-disabled={props.disabled ? '' : undefined}\n      {...buttonProps}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => {\n        if (!props.disabled) {\n          setPressed(!pressed);\n        }\n      })}\n    />\n  );\n});\n\nToggle.displayName = NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toggle;\n\nexport {\n  Toggle,\n  //\n  Root,\n};\nexport type { ToggleProps };\n"],"mappings":";;;;;;ACOA;;;AAIA,MAAMA,0BAAI,GAAG,QAAb;AAqBA,MAAMC,yCAAM,gBAAGC,iBAAA,CAA6C,CAACC,KAAD,EAAQC,YAAR,KAAyB;EACnF,MAAM;IAAEC,OAAO,EAAEC,WAAX;IAAwBC,cAAc,GAAG,KAAzC;qBAAgDC,eAAhD;IAAiE,GAAGC;EAAH,CAAjE,GAAoFN,KAA1F;EAEA,MAAM,CAACE,OAAO,GAAG,KAAX,EAAkBK,UAAlB,IAAgCC,2BAAoB,CAAC;IACzDC,IAAI,EAAEN,WADmD;IAEzDO,QAAQ,EAAEL,eAF+C;IAGzDM,WAAW,EAAEP;GAH2C,CAA1D;EAMA,oBACEQ,oBAAA,CAACC,gBAAD,CAAWC,MAAX,EADFC,oCAAA;IAEIC,IAAI,EAAC,QADP;IAEE,gBAAcd,OAFhB;IAGE,cAAYA,OAAO,GAAG,IAAH,GAAU,KAH/B;IAIE,iBAAeF,KAAK,CAACiB,QAAN,GAAiB,EAAjB,GAAsBC;GAJvC,EAKMZ,WALN;IAMEa,GAAG,EAAElB,YANP;IAOEmB,OAAO,EAAEC,2BAAoB,CAACrB,KAAK,CAACoB,OAAP,EAAgB,MAAM;MACjD,IAAI,CAACpB,KAAK,CAACiB,QAAX,EACEV,UAAU,CAAC,CAACL,OAAF,CAAV;KAFyB;GAP/B,EADF;CATa,CAAf;AA0BA;AAAAoB,MAAA,CAAAC,MAAA,CAAAzB,yCAAA;EAAA0B,WAAA,EAAA3B;CAAA;AAEA;AAEA,MAAM4B,yCAAI,GAAG3B,yCAAb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}