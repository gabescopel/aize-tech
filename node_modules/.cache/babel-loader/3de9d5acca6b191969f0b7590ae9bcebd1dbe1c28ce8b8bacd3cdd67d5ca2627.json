{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\StoreTech\\\\Documents\\\\GitHub\\\\aize-tech\\\\src\\\\ui\\\\components\\\\Fluxograma.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\nimport 'react-flow-renderer/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Fluxograma = () => {\n  _s();\n  const [elements, setElements] = useState([{\n    id: '1',\n    type: 'input',\n    data: {\n      label: 'Input Node'\n    },\n    position: {\n      x: 100,\n      y: 100\n    }\n  }, {\n    id: '2',\n    type: 'output',\n    data: {\n      label: 'Output Node'\n    },\n    position: {\n      x: 300,\n      y: 100\n    }\n  }, {\n    id: 'e1-2',\n    source: '1',\n    target: '2',\n    animated: true\n  } // Aqui você define que a aresta é animada\n  ]);\n  const addNode = () => {\n    const newNode = {\n      id: (elements.length + 1).toString(),\n      type: 'default',\n      data: {\n        label: `Node ${elements.length + 1}`\n      },\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      } // Aqui você está definindo a posição do novo nó\n    };\n    setElements(prevElements => [...prevElements, newNode]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: elements,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      onLoad: () => {},\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          switch (node.type) {\n            case 'input':\n              return 'orange';\n            case 'output':\n              return 'green';\n            default:\n              return 'gray';\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      children: \"Adicionar N\\xF3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Fluxograma, \"dupwoI1Xs3QRgT8UkVkmCUUcbs8=\");\n_c = Fluxograma;\nexport default Fluxograma;\nvar _c;\n$RefreshReg$(_c, \"Fluxograma\");","map":{"version":3,"names":["React","useState","ReactFlow","MiniMap","Controls","Background","jsxDEV","_jsxDEV","Fluxograma","_s","elements","setElements","id","type","data","label","position","x","y","source","target","animated","addNode","newNode","length","toString","Math","random","prevElements","style","width","height","children","nodes","onLoad","nodeColor","node","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/StoreTech/Documents/GitHub/aize-tech/src/ui/components/Fluxograma.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, Background, Node, Edge } from 'react-flow-renderer';\r\nimport 'react-flow-renderer/dist/style.css';\r\n\r\nconst Fluxograma: React.FC = () => {\r\n  const [elements, setElements] = useState<any[]>([\r\n    { id: '1', type: 'input', data: { label: 'Input Node' }, position: { x: 100, y: 100 } },\r\n    { id: '2', type: 'output', data: { label: 'Output Node' }, position: { x: 300, y: 100 } },\r\n    { id: 'e1-2', source: '1', target: '2', animated: true }, // Aqui você define que a aresta é animada\r\n  ]);\r\n\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: (elements.length + 1).toString(),\r\n      type: 'default',\r\n      data: { label: `Node ${elements.length + 1}` },\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 }, // Aqui você está definindo a posição do novo nó\r\n    };\r\n\r\n    setElements(prevElements => [...prevElements, newNode]);\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100vh' }}>\r\n      <ReactFlow\r\n        nodes={elements}\r\n        style={{ width: '100%', height: '100%' }}\r\n        onLoad={() => {}}\r\n      >\r\n        <MiniMap\r\n          nodeColor={(node) => {\r\n            switch (node.type) {\r\n              case 'input':\r\n                return 'orange';\r\n              case 'output':\r\n                return 'green';\r\n              default:\r\n                return 'gray';\r\n            }\r\n          }}\r\n        />\r\n        <Controls />\r\n        <Background />\r\n      </ReactFlow>\r\n      <button onClick={addNode}>Adicionar Nó</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Fluxograma;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}